import createHasErrors from '../hasErrors';
import createHasError from '../hasError';
import plain from '../structure/plain';

var plainHasErrors = createHasErrors(plain);

var createIsValid = function createIsValid(structure) {
  var getIn = structure.getIn;

  var hasErrors = createHasErrors(structure);
  var hasError = createHasError(structure);
  return function (form) {
    var getFormState = arguments.length <= 1 || arguments[1] === undefined ? function (state) {
      return getIn(state, 'form');
    } : arguments[1];
    return function (state) {
      var formState = getFormState(state);
      var asyncErrors = getIn(formState, form + '.asyncErrors');
      var submitErrors = getIn(formState, form + '.submitErrors');
      var syncErrors = getIn(formState, form + '.syncErrors');
      var hasSyncErrors = plainHasErrors(syncErrors);
      var hasAsyncErrors = hasErrors(asyncErrors);
      var hasSubmitErrors = hasErrors(submitErrors);
      var registeredFields = getIn(formState, form + '.registeredFields') || [];
      var hasFieldWithError = registeredFields && registeredFields.some(function (field) {
        return hasError(field, syncErrors, asyncErrors, submitErrors);
      });
      return !hasSyncErrors && !hasAsyncErrors && !hasSubmitErrors && !hasFieldWithError;
    };
  };
};

export default createIsValid;